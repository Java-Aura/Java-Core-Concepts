Clonig an object : the process of creaing exact copy of an object is known as cloning an object.
					
					In java we two ways to copy an object data.
					
					1) Using assignment operator: In this case we use equals operator for copying the object data.
												  In this case only the reference will be copied to newly copied object.
												  And the changes made by copied object will be reflected to original object.
												  
												  EX:
														public class CloneUsingAssignmentOperator {

																public static void main(String[] args) {
																	
																	Clone obj = new Clone();
																	System.out.println(obj.k);
																	System.out.println(obj.j);
																	Clone obj1 = obj; // both object reference are same. i.e referring an object.
																	obj1.j=56; // changes will be reflected to original object
																	System.out.println(obj.hashCode());
																	System.out.println(obj1.hashCode());
																	System.out.println(obj.j);
																}

															}


															class Clone{
																
																int k =89;
																int j = 78;
																
															}

					
					2) Using clone method: In this If we want clone an object then that class must implements Clonable interface.
										   and also the class must override the clone() method and this throws the CloneNotSupportedException.
										   and inside this clone() method we need to super.clone() to create copy of an object.
										   syntax:
														public void clone()CloneNotSupportedException{
														super.clone();
														}
						i) shallow cloning: the process of copying primitive data of an object is known as shallo cloning.
											in this case only the primitive data of an object will be copied
						
									Ex:
												public class ShalloCloning {

														public static void main(String[] args) throws CloneNotSupportedException {

															Shallo2 obj = new Shallo2();
															obj.a = 90;
															obj.b = 12;
															obj.sh.j = 34;
															obj.sh.k = 78;
															Shallo2 obj2 = (Shallo2)obj.clone();
															obj2.a =67; // copied and changes reflected in copied object
															obj2.sh.j =45; // not copied object of Shallow1 and changes reflected in both the  objects
															
															System.out.println("original object data: " + obj.a + ":" + obj.b + ":" + obj.sh.k + ":" + obj.sh.j);
															System.out.println("copied object data: " + obj2.a + ":" + obj2.b + ":" + obj2.sh.k + ":" + obj2.sh.j);
															System.out.println(obj.hashCode());
															System.out.println(obj2.hashCode());
														}

													}

													class Shallow1{
														
														int k;
														int j;
													}


													class Shallo2 implements Cloneable
													{
														int a;
														int b;
														Shallow1 sh = new Shallow1();
														public Object clone() throws CloneNotSupportedException {
															return super.clone();
															
														}
													}
						ii) deep cloning: the process of copying primitive and non-primitive data of an object is known as deep cloning
					
					
											Ex:
													public class DeepCloningObject {

																	public static void main(String[] args) throws CloneNotSupportedException {

																		DeepClone1 obj = new DeepClone1();
																		obj.a = 90;
																		obj.b = 12;
																		obj.dp.j = 34;
																		obj.dp.k = 78;
																		DeepClone1 obj2 = (DeepClone1) obj.clone();
																		obj2.a = 67; // copied and changes reflected in copied object
																		obj2.dp.j = 45; // not copied object of Shallow1 and changes reflected in both the objects

																		System.out.println("original object data: " + obj.a + ":" + obj.b + ":" + obj.dp.k + ":" + obj.dp.j);
																		System.out.println("copied object data: " + obj2.a + ":" + obj2.b + ":" + obj2.dp.k + ":" + obj2.dp.j);
																		System.out.println(obj.hashCode());
																		System.out.println(obj2.hashCode());
																	}
																}

																class DeepClone {

																	int k;
																	int j;
																}

																class DeepClone1 implements Cloneable {
																	int a;
																	int b;
																	DeepClone dp = new DeepClone();

																	public Object clone() throws CloneNotSupportedException {
																		
																		DeepClone1 dp1 = (DeepClone1)super.clone();
																		dp1.dp =  new DeepClone();
																		dp1.dp.j= dp.j;
																		dp1.dp.k= dp.k;
																		return dp1;
																	}
																}