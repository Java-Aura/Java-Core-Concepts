Constructor: Constructor is a special type of method which is declared with the same class name. or A method which is declared with same class name and without return type known as constructor.
			 And If we declare the constructor with return-type then it is treated as a method.
			 Constructor can be used to initialize objects. and it is called when the instance/object of the class is created.(Ex: TestClass obj = new TestClass();)
			 At the time of constructor calling the memory of the object is allocated in the heap area.
			 Every time an object is created with the new keyword at least one constructor is called.
			 A constructor will return current class object.
				
			 
			 EX:
					public class TestConstructor{
						
						TestConstructor(){
							
						}
						public static void main(String ar[]){
							
						}
						
						
					}
			 
		Note: it is not necessary to create constructor for a class, because the java compiler will create the default constructor if not created by the programmer
		
		
		Difference between constructor and method:
		
													i) Constructor must have the same name as class name, but for methods we can use any name.
													ii) Constructor do not return any value where as methods can return
													iii) Constructor can be called only once while object creation but we can call methods any number of times.
													
													
													
			1) Default Constructor: The constructor which is generated by the compiler is known as default constructor.and it is zero/ no-arguments constructor
			
			
			2) User-defined Constructor: The constructor which is written by the programmer is known as user-defined constructor.
									
										i) Constructor with parameter: The constructor which can accept the parameters is known as constructor with parameter.
																	   The parameters can be passed to constructor at the time of object creation.(ex: TestClass obj = new TestClass(12);)
										
										ii) Constructor without parameter(also known as default constructor): The constructor which is declared by the programmer and doesn't accept any parameters
										
				Note: The default constructor is defined by complier only when there is no constructor created for the class by the programmer.
				
				
			Note: private constructor can be used to restrict outsider to create object for the class. to access object we should provide the method which returns object for the class.
			
			
			
			
			Ex1: 
			

											public class ConstructorExample {

												ConstructorExample() {
													System.out.println("Zero-arguments constructor");
												}

												ConstructorExample(int i) {
													System.out.println("arguments constructor:" + i);
												}

												ConstructorExample(String name, int age) {
													System.out.println("arguments constructor:\n" + "Name: " + name + ", Age: " + age);
												}

												public static void main(String[] args) {

													ConstructorExample constructorExample = new ConstructorExample(); // Zero-arguments constructor
													ConstructorExample constructorExample1 = new ConstructorExample(12); // arguments constructor
													ConstructorExample constructorExample2s = new ConstructorExample("TestName", 18); // arguments constructor

												}

											}
											
			Ex2:


							public class PrivateConstrutor {

								public static void main(String[] args) {
									
									//ConstructorPrivate obj = new ConstructorPrivate();// gives error due to private constructor.
									ConstructorPrivate instance = ConstructorPrivate.getInstance();
									instance.k=78;
									System.out.println(instance.k);
									ConstructorPrivate instance1 = ConstructorPrivate.getInstance();
									ConstructorPrivate instance2 = ConstructorPrivate.getInstance();
									System.out.println(instance1.k);
									System.out.println(instance2.k);
								}

							}

							class ConstructorPrivate{
								int k =90;
								static ConstructorPrivate instance = null;
								
								private ConstructorPrivate(){
									
								}
								
								
								public static ConstructorPrivate getInstance() {
									if(instance == null) {
										instance =  new ConstructorPrivate();
									}
									
									return instance;
								}
								
							}



Initialize values to variables: 		
								i) At the time of declaration.
								
								ii) using blocks.
								
								iii) using constructor.