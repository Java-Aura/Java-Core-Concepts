

1. Java Virtual Machine(JVM):

 i) writing phase --- the programmer will write the code.(Test.Java)
 ii) compilation phase --- javac is the compiler which will compile the source code to byte code(Test.class).
 iii) execution phase --- Java runtime environment (JRE) will execute the byte code.

2. Byte Code in the Development process: javac is the compiler which will compile the source code to byte code(Test.class). javap is the command to see the methods of the class.
 
3. Java Development Kit(JDK):  

	i) Java development tool kit : Which includes JRE,JAVAC and JAVA Debugger , Java docs. 
	ii) JDK is the platform dependent 
	
	Note : JDK is the platform dependent but the code generated by Java compiler is the platform independent 

4. Java Runtime Environment (JRE): 

	i) with JRE the byte code which is generated using compiler will be executed.

5. Garbage Collector: the programmer can't destroy the objects but we can specify the objects to be garbage collected.

6. ClassPath: is the path where the Java runtime and compiler will look .class files.

After installing JDK we have to set path : C:\Program Files\Java\jdk-17.0.2\bin;.

Features 
===============

1. Platform Independent:  

We can run the Java program in platform and compile it after compilation .class file will be generated. we can run this .class file in ant platform, this makes Java as a platform independent.

to execute .class the platform should have JRE.
Compile the code in one platform and run it in any of platforms in which the JRE installed.

2. Object-Oriented Programming Language(OOPS): collecting Java program in objects.

	1)Abstraction
	2)Encapsulation
	3)Inheritance
	4)Polymorphism


3. Simple: in Java we don't have pointers,Operator overloading,and Multiple inheritance is also not there then this makes Java as simple.

4. Robust: Java is more reliable. in Java we can fix most of the errors in compilation state this makes Java is robust.

5. Secure:  in Java we don't pointers(pointers refer the address location of the objects which is not secure).

6. Distributed: we can distribute Java application through network. we have Enterprise Java beans(EJB) and remote method invocation(RMI)

7. Multithreading: Executing program by multiple threads.

8. Portable: after compilation .class file will be generated this file we can send to any platform which makes Java as a portable.


Java Programming Format
============================

Every Java programmer should follow the coding format.

	1)Documentation Section:
		this is the section we can add comments for methods.variables etc. which makes the programmer more readable 
		i) Single line comments ex: // single line comments
		ii) Multi line comments ex : /* Multiline comment
		iii) Documentation comments ex: /** documentation comments */
		
	2)Package Section : In Java we can collect multiple classes as collection is known as package. we can declare package using package keyword.
	3)Import Section : In Java we have predefined classes if we want to use them then we have to import in out programme.
	4)Interface Section : in this section we can declare interface(interface can be used to achieve multiple inheritance in Java)
	5)Class section : in this section we can declare classes. we can declare n number of classes in a single Java file.
	6)Main method class  : In Java execution starts from main method.
		signature : public static void main(String a[]){
															}
			
Java File :
============
We can declare the class using class keyword. class name should start with capital letter.
i)within the Java file we can declare classes, interfaces and methods.
ii) Each Java file can have only one public class. and only public class can have main method.



			
														
Java Tokens
============

1) Keywords: keywords are reserved words in Java we can't use them for variable name, method name, etc. ex: break, continue,class, interface, int, void, public, private etc.

2) identifiers: menas giving name to variables, methods,classes etc.

 standards we should follow : identifier name should start with letter, dollar symbol. 
							  underscore, apart from this we can have any character, case sensitive, and can't start with digit but inside we can have digits.
							  we should not use keywords as identifiers.
							  

3) Literals: means constants that means once defined can't be changed. we can declare constants in Java using final keyword.

4) Operators: can be used to perform certain operation on variables.

	Arithmetic : +,-,/,%.*
	unary : ++,--,!
	assignment : =, +=,-=,/=,%=,*=
	relational: <,> <=,>=, == returns true/false
	Ternary : which is alternative for if else.
	bitwise : &, |,^, ~

5) Symbols: special characters in Java which having special meaning.

 [] : this is for declaring Array of elements.
 {} : this is for to declare block of statements.
 () : can be used to declare methods,constructors.
 , : can be used to separate variables, or statements.
 ; : can be used to specify end of the statement.
 * : pointer variable in Java
 
 
 Variable : Variables are data holders which hold specified data(int,float,String any object data)
 
 =========
 Data Types : data types can be used to specify what type of data that variable can hold.
 
 Primitive data types: these are the data types already defined in Java programming language.
 
	Boolean Type: boolean (true/false) default value is false size is 1 bit
	
	Numeric Type: 
		
		Character: 
				char: default values is \u0000 size is 2 bytes(16 bits)
		
		 Integer: 
			
			Integer: 
				
				byte: default value is 0 and size 8 bits(1 byte) range is -128 to 127
				short: default value is 0 and size 16 bits(2 bytes) range is -32768 t0 32767
				int: default value is 0 and size 32 bits(4 bytes)
				long: default value is 0 and size 64 bits (8 bytes)
			
			Floating point: 
				
				float: default value is 0.0 size is 32 bits(4 bytes)
				double: default value is 0.0 size is 64 bits(8 bytes)
	
 
 Non-primitive data types: Data types which are not defined in Java programming language(programmer can defined) except String.
 
	ex : String, Arrays, user defined objects etc.
	
	
Types of Variables : variable 
=============================

variables in Java are two types:

	1) Static Variables: the variables which are declared using static keyword are known as static variables, These static variables can be accessed using calss name directly
	
		syntax : static <data-type> <variable-name>;
	
	2) Non-Static Variables: variable : The variables which are declare without static keyword are known as non-static variables, These Variables Can be accessed using Object of the class.
	
		syntax :  <data-type> <variable-name>;
		
	Class : Class is a blueprint which generates objects. Class can have variables, methods, blocks. from the calss we can create any number of objects.
			class name should follow Pascal case(TestClassExample)
			we can create the class using class keyword.
			class name should start with Capital letter.
			within the java file we can't have more than one class with the same name.

	
		Syntax : <Access-Modifier> calss <class-name>{
		
			}

	Access-Modifiers : 
	
	 public : The members which are declared using public are can be accessed anywhere from project.
				Syntax : public <data type/return type> <variable-name/method-name/class-name>{
				
				}
				
	Private : The Members which are declared using private are can be accessed within the class only. to access these members we have to provide getter methods.
	
	Protected : The members which are declared using protected are can be accessed within the package. But in inheritance the child class can access protected members of parent class.
	
	default:  The members which are declared using protected are can be accessed within the package. this is the default modifier if we don't provide any one.
	
	Object: object is a physical existence of a class, object can have states(Variables) and behaviour(methods and blocks) of a class
			we can create N number of objects for the single class.
			we cane create objects using "new" keyword.
			Object can access all members of class as this object generated from class.
			
			<type-of object/class-name> reference-name = new <type-of object/class-name>();
			
			
Method: method is a function which execute logics and may or may not return the value.
		method name should be follow camel case(displayTestExample,displayTestExampleOne)

		Syntax : <Access-Modifier> <return-type/void> <method-name>(){
		
		}
		ex: public void display(){
		// statements
		}

		1) Method with return type: if the method returns the value after it's execution then we can call it as method with return type.
		
		Syntax : <Access-Modifier> <return-type> <method-name>(){
		
		}
		return is the keyword to return value.
		
		ex: public int sumOfValues(){
		int k =10;
		int i =20;
		int sum = k+i;
		return sum;
		// statements
		}
			
		
		2)Method without return type: if the method doesn't returns the value after it's execution then we can call it as method without return type.
										We can use void keyword to specify the method will not return any value after it's execution.
		
			Syntax : <Access-Modifier> void <method-name>(){
					
					}
					
					ex: public void sumOfValues(){
					
						// statements
					}
 
		3) Method with parameter: These methods will accept any parameter
		
			Syntax: Syntax : <Access-Modifier> <return-type/void> <method-name>(<data-type> <variable-name>){
		
		}
		
		ex : public int sumOfValues(int k,int i){
				
				int sum = k+i;
				return sum;
		}


		4) Method without parameter: These methods will not accept any parameter
 
 
			Syntax: Syntax : <Access-Modifier> <return-type/void> <method-name>(){
		
				}

				ex: public void sumOfValues(){
						int k =10;
						int i =20;
						int sum = k+i;
						System.out.println("Sum of values is : "+ sum);
						// statements
					}
					
Expression : 

An expression made up of data types, variables, operators, and calling methods.

ex: int k =10; // assiging value 
	Test obj = new Test(); // creating object for the Test class
	obj.display(); // calling methods
	String str; // declaring String variable



Statements : 	Statements are equivalent to sentences. Statements forms a unit of execution. 	

	Declaration statements: These statements can be used to declare the variables
		ex : int k =90;
	
	Expression Statements: these statements are ended with semicolon ;
			ex: int k =10 // expression
			k++;
			k--;
				int k =23; //  statement
				
	ControlFlow Statements : The Statements which are used to control the flow of execution.
		
		i) Conditional statements: The statements which can be used to control the flow of execution with some condition known as conditional statements
			
			if : can be used to executes statements based on condition
			
				Syntax : if(condition){
								// statements
							}
			else : can be used to execute statements if the if condition not satisfied.
			
					Syntax : 
								if(condition){
									// statements
								}	
								else{
										// statements
								}
			else if : if the if condition not true then we can use else if to check for another condition.
			
					if(condition){
									// statements
								}	
								
								else if (condition){
									// statements
								}
								else{
										// statements
								}
			
			switch : alternate for if, else if, else. this statement can have multiple execution paths.
			
				Syntax : 
				
							switch(value){
							
							case <value>: 
							// statements
								break;
								
							case <value2>:
							// statements
							break;
							
							default:
							// statements
							
							}
		
		ii) Looping Statements: can be used to iterate over the condition
			for : 
			while:
			do while: 
		
		iii) Branching statements

									
	








